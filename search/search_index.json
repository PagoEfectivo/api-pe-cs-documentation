{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PagoEfectivo API Objetivo PagoEfectivo API fue creado para que el afiliado integre en su plataforma las funcionalidades de generaci\u00f3n, consulta, eliminaci\u00f3n y actualizaci\u00f3n de los CIPS. Se ha desarrollado una Demo de ejemplo para mostrar c\u00f3mo consumen los m\u00e9todos en el sistema operativo windows, usando el lenguaje de programaci\u00f3n C#. Al descargar el c\u00f3digo fuente y ejecutar la Demo se observa que contiene un men\u00fa con los m\u00e9todos y una opci\u00f3n llamada Configuraci\u00f3n donde se debe introducir los datos de accesos facilitados por comercial. Requisitos Microsoft Visual Studio 2017 u otro Editor. .NET Core 2.0. M\u00e9todos A continuaci\u00f3n se muestra con detalle la invocaci\u00f3n de los siguientes m\u00e9todos: M\u00e9todo de Autorizaci\u00f3n Se encarga de devolver la informaci\u00f3n de los cips solicitados. Para consumir el m\u00e9todo generar se requieren los siguientes par\u00e1metros: URL: http://services.pagoefectivo.pe Punto de entrada: /v1/authorizations M\u00e9todo: POST Al ejecutar la Demo es necesario registrar el id de servicio , Access key , secret key para hacer uso de las funcionalidades como se muestra a continuaci\u00f3n: Luego de introducir los datos de autorizaci\u00f3n, clic en registrar, luego muestra la confirmaci\u00f3n. Cada vez que se consumen los m\u00e9todos de PagoEfectivo API es necesario generar los accesos de seguridad enviando los datos ingresados del formulario Configuraci\u00f3n . La demo guarda los datos enviados en memoria Cach\u00e9 para Agilizar la carga y enviarlos al servicio de autorizaci\u00f3n. A continuaci\u00f3n se muestra el c\u00f3digo desarrollado en C# para consumir el servicio de autorizaci\u00f3n. //M\u00e9todo Autorizaci\u00f3n CIP ... Authenticate authorization = new Authenticate () { accessKey = authenticateViewModel . AccessKey , idService = authenticateViewModel . IdService , dateRequest = DateNow . ToString ( \"yyyy-MM-ddTHH:mm:sszzz\" ) }; var authRequest = authorization . idService . ToString () + \".\" + authorization . accessKey + \".\" + authenticateViewModel . SecretKey + \".\" + authorization . dateRequest ; authorization . hashString = Hash . HashString ( authRequest ); using ( var client = new HttpClient ()) { client . BaseAddress = new Uri ( _url ); string stringData = JsonConvert . SerializeObject ( authorization ); var contentData = new StringContent ( stringData , System . Text . Encoding . UTF8 , \"application/json\" ); HttpResponseMessage response = client . PostAsync ( \"v1/authorizations\" , contentData ). Result ; if ( response . IsSuccessStatusCode ) { dynamic responseAuth = JsonConvert . DeserializeObject < AuthenticateResponse >( response . Content . ReadAsStringAsync (). Result ); responseAuth . url = _url ; return responseAuth ; } else return response ; } ... M\u00e9todo Generar CIP Se encarga de devolver la informaci\u00f3n de los cips solicitados. Para consumir el m\u00e9todo generar se requieren los siguientes par\u00e1metros: URL: http://services.pagoefectivo.pe Punto de entrada: /v1/cips M\u00e9todo: POST Se requiere ingresar el tipo de moneda , monto , c\u00f3digo de transacci\u00f3n y correo de usuario para la generaci\u00f3n de CIP. El formulario tiene la opci\u00f3n de habilitar campos opcionales para Generar un CIP con un mayor detalle. Response: Al Ingresar los Datos solicitados clic en el bot\u00f3n generar. se muestra la siguiente respuesta: Es posible registrar datos opcionales para generar cip con mayor detalle de informaci\u00f3n, como se muestra a continuaci\u00f3n. Clic en bot\u00f3n generar y muestra la respuesta del servicio. Para visualizar el Cip generado hacer clic en campo URL para ver el detalle de la generaci\u00f3n como se muestra a continuaci\u00f3n: continuaci\u00f3n se muestra el c\u00f3digo desarrollado en C# para invocar el M\u00e9todo generar CIP. //M\u00e9todo Generar CIP ... using ( var client = new HttpClient ()) { client . BaseAddress = new Uri ( responseAuthz . url ); client . DefaultRequestHeaders . Authorization = new AuthenticationHeaderValue ( \"Bearer\" , responseAuthz . Data . Token ); var cip = new CipGenerate { Currency = model . Currency , Amount = model . Amount , TransactionCode = model . TransactionCode , UserEmail = model . UserEmail , AdminEmail = model . AdminEmail , DateExpiry = model . DateExpiry , PaymentConcept = model . PaymentConcept , AdditionalData = model . AdditionalData , UserName = model . UserName , UserLastName = model . UserLastName , UserUbigeo = model . UserUbigeo , UserCountry = model . UserCountry , UserDocumentType = model . UserDocumentType , UserDocumentNumber = model . UserDocumentNumber , UserPhone = model . UserPhone , UserCodeCountry = model . UserCodeCountry }; string stringData = JsonConvert . SerializeObject ( cip ); var contentData = new StringContent ( stringData , System . Text . Encoding . UTF8 , \"application/json\" ); HttpResponseMessage response = client . PostAsync ( \"v1/cips\" , contentData ). Result ; if ( response . IsSuccessStatusCode ) { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } else { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } } return View (); ... M\u00e9todo Consultar CIP Se encarga de devolver la informaci\u00f3n de los cips solicitados. Para consumir el m\u00e9todo Consultar Ingresar el n\u00famero de CIP , se requieren los siguientes par\u00e1metros para la invocaci\u00f3n: URL: http://services.pagoefectivo.pe Punto de entrada: /v1/cips/search M\u00e9todo: POST Response: Ingresar el CIP, luego clic en Consultar y muestra la siguiente respuesta: A continuaci\u00f3n se muestra el c\u00f3digo desarrollado en C# para invocar el M\u00e9todo eliminar CIP. //M\u00e9todo Consultar CIP ... using ( var client = new HttpClient ()) { client . BaseAddress = new Uri ( responseAuthz . url ); client . DefaultRequestHeaders . Authorization = new AuthenticationHeaderValue ( \"Bearer\" , responseAuthz . Data . Token ); var cip = new CipSearch { Data = model . Data }; string stringData = JsonConvert . SerializeObject ( cip ); var contentData = new StringContent ( stringData , System . Text . Encoding . UTF8 , \"application/json\" ); HttpResponseMessage response = client . PostAsync ( \"v1/cips/search\" , contentData ). Result ; if ( response . IsSuccessStatusCode ) { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } else { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } } return View (); ... M\u00e9todo Actualizar CIP Se encarga de actualizar la fecha de expiraci\u00f3n de un cip generado; si el cip se encuentra expirado al actualizarse la fecha de expiraci\u00f3n este pasa a estado generado. Se requieren los siguientes par\u00e1metros de invocaci\u00f3n: URL: http://services.pagoefectivo.pe Punto de entrada: /v1/cips/{id} M\u00e9todo: PATCH Response: Ingresar el CIP y la fecha de expiraci\u00f3n, luego clic en Actualizar par mostrar la siguiente respuesta: Luego se verifica el CipURL para validar la actualizaci\u00f3n de la Fecha de expiraci\u00f3n. A continuaci\u00f3n se muestra el c\u00f3digo desarrollado en C# para invocar el M\u00e9todo actualizar CIP. //M\u00e9todo Actualizar CIP ... using ( var client = new HttpClient ()) { client . BaseAddress = new Uri ( responseAuthz . url ); client . DefaultRequestHeaders . Authorization = new AuthenticationHeaderValue ( \"Bearer\" , responseAuthz . Data . Token ); var cip = new CipUpdate { DateExpiry = model . DateExpiry }; string stringData = JsonConvert . SerializeObject ( cip ); var contentData = new StringContent ( stringData , System . Text . Encoding . UTF8 , \"application/json\" ); var request = new HttpRequestMessage ( new HttpMethod ( \"PATCH\" ), responseAuthz . url + \"v1/cips/\" + model . Data [ 0 ]. Cip ) { Content = contentData }; HttpResponseMessage response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } else { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } } return View (); ... M\u00e9todo Eliminar CIP Se encarga de eliminar l\u00f3gicamente el N\u00famero de CIP siempre en cuando este a\u00fan se encuentre en estado generado, Para consumir el m\u00e9todo Eliminar ingresar el n\u00famero de CIP . Se requieren los siguientes par\u00e1metros de invocaci\u00f3n: URL: http://services.pagoefectivo.pe Punto de entrada: /v1/cips/{id} M\u00e9todo: DELETE Response: Ingresar el CIP, luego clic en Eliminar y Muestra la siguiente respuesta: Al verificar el CipUrl no muestra ninguna informaci\u00f3n habiendo hecho la eliminaci\u00f3n l\u00f3gica del Cip como se muestra a continuaci\u00f3n: A continuaci\u00f3n se muestra el c\u00f3digo desarrollado en C# para invocar el M\u00e9todo eliminar CIP. //M\u00e9todo Eliminar CIP ... using ( var client = new HttpClient ()) { client . BaseAddress = new Uri ( responseAuthz . url ); client . DefaultRequestHeaders . Authorization = new AuthenticationHeaderValue ( \"Bearer\" , responseAuthz . Data . Token ); HttpResponseMessage response = client . DeleteAsync ( \"v1/cips/\" + model . Data [ 0 ]. Cip ). Result ; if ( response . IsSuccessStatusCode ) { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } else { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } } return View (); ... Conclusi\u00f3n Se muestra la funcionalidad de PagoEfectivo API para la integraci\u00f3n de nuevos clientes, el uso del servicio de seguridad para obtener el acceso a todas los m\u00e9todos ofrecidos por PagoEfectivoSDK y el c\u00f3digo C# para la invocaci\u00f3n correcta de las funcionalidades. Demo Puede descargar la demo en el siguiente enlace: https://github.com/PagoEfectivo/api-pe-csharp-example","title":"Home"},{"location":"#pagoefectivo-api","text":"","title":"PagoEfectivo API"},{"location":"#objetivo","text":"PagoEfectivo API fue creado para que el afiliado integre en su plataforma las funcionalidades de generaci\u00f3n, consulta, eliminaci\u00f3n y actualizaci\u00f3n de los CIPS. Se ha desarrollado una Demo de ejemplo para mostrar c\u00f3mo consumen los m\u00e9todos en el sistema operativo windows, usando el lenguaje de programaci\u00f3n C#. Al descargar el c\u00f3digo fuente y ejecutar la Demo se observa que contiene un men\u00fa con los m\u00e9todos y una opci\u00f3n llamada Configuraci\u00f3n donde se debe introducir los datos de accesos facilitados por comercial.","title":"Objetivo"},{"location":"#requisitos","text":"Microsoft Visual Studio 2017 u otro Editor. .NET Core 2.0.","title":"Requisitos"},{"location":"#metodos","text":"A continuaci\u00f3n se muestra con detalle la invocaci\u00f3n de los siguientes m\u00e9todos:","title":"M\u00e9todos"},{"location":"#metodo-de-autorizacion","text":"Se encarga de devolver la informaci\u00f3n de los cips solicitados. Para consumir el m\u00e9todo generar se requieren los siguientes par\u00e1metros: URL: http://services.pagoefectivo.pe Punto de entrada: /v1/authorizations M\u00e9todo: POST Al ejecutar la Demo es necesario registrar el id de servicio , Access key , secret key para hacer uso de las funcionalidades como se muestra a continuaci\u00f3n: Luego de introducir los datos de autorizaci\u00f3n, clic en registrar, luego muestra la confirmaci\u00f3n. Cada vez que se consumen los m\u00e9todos de PagoEfectivo API es necesario generar los accesos de seguridad enviando los datos ingresados del formulario Configuraci\u00f3n . La demo guarda los datos enviados en memoria Cach\u00e9 para Agilizar la carga y enviarlos al servicio de autorizaci\u00f3n. A continuaci\u00f3n se muestra el c\u00f3digo desarrollado en C# para consumir el servicio de autorizaci\u00f3n. //M\u00e9todo Autorizaci\u00f3n CIP ... Authenticate authorization = new Authenticate () { accessKey = authenticateViewModel . AccessKey , idService = authenticateViewModel . IdService , dateRequest = DateNow . ToString ( \"yyyy-MM-ddTHH:mm:sszzz\" ) }; var authRequest = authorization . idService . ToString () + \".\" + authorization . accessKey + \".\" + authenticateViewModel . SecretKey + \".\" + authorization . dateRequest ; authorization . hashString = Hash . HashString ( authRequest ); using ( var client = new HttpClient ()) { client . BaseAddress = new Uri ( _url ); string stringData = JsonConvert . SerializeObject ( authorization ); var contentData = new StringContent ( stringData , System . Text . Encoding . UTF8 , \"application/json\" ); HttpResponseMessage response = client . PostAsync ( \"v1/authorizations\" , contentData ). Result ; if ( response . IsSuccessStatusCode ) { dynamic responseAuth = JsonConvert . DeserializeObject < AuthenticateResponse >( response . Content . ReadAsStringAsync (). Result ); responseAuth . url = _url ; return responseAuth ; } else return response ; } ...","title":"M\u00e9todo de Autorizaci\u00f3n"},{"location":"#metodo-generar-cip","text":"Se encarga de devolver la informaci\u00f3n de los cips solicitados. Para consumir el m\u00e9todo generar se requieren los siguientes par\u00e1metros: URL: http://services.pagoefectivo.pe Punto de entrada: /v1/cips M\u00e9todo: POST Se requiere ingresar el tipo de moneda , monto , c\u00f3digo de transacci\u00f3n y correo de usuario para la generaci\u00f3n de CIP. El formulario tiene la opci\u00f3n de habilitar campos opcionales para Generar un CIP con un mayor detalle. Response: Al Ingresar los Datos solicitados clic en el bot\u00f3n generar. se muestra la siguiente respuesta: Es posible registrar datos opcionales para generar cip con mayor detalle de informaci\u00f3n, como se muestra a continuaci\u00f3n. Clic en bot\u00f3n generar y muestra la respuesta del servicio. Para visualizar el Cip generado hacer clic en campo URL para ver el detalle de la generaci\u00f3n como se muestra a continuaci\u00f3n: continuaci\u00f3n se muestra el c\u00f3digo desarrollado en C# para invocar el M\u00e9todo generar CIP. //M\u00e9todo Generar CIP ... using ( var client = new HttpClient ()) { client . BaseAddress = new Uri ( responseAuthz . url ); client . DefaultRequestHeaders . Authorization = new AuthenticationHeaderValue ( \"Bearer\" , responseAuthz . Data . Token ); var cip = new CipGenerate { Currency = model . Currency , Amount = model . Amount , TransactionCode = model . TransactionCode , UserEmail = model . UserEmail , AdminEmail = model . AdminEmail , DateExpiry = model . DateExpiry , PaymentConcept = model . PaymentConcept , AdditionalData = model . AdditionalData , UserName = model . UserName , UserLastName = model . UserLastName , UserUbigeo = model . UserUbigeo , UserCountry = model . UserCountry , UserDocumentType = model . UserDocumentType , UserDocumentNumber = model . UserDocumentNumber , UserPhone = model . UserPhone , UserCodeCountry = model . UserCodeCountry }; string stringData = JsonConvert . SerializeObject ( cip ); var contentData = new StringContent ( stringData , System . Text . Encoding . UTF8 , \"application/json\" ); HttpResponseMessage response = client . PostAsync ( \"v1/cips\" , contentData ). Result ; if ( response . IsSuccessStatusCode ) { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } else { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } } return View (); ...","title":"M\u00e9todo Generar CIP"},{"location":"#metodo-consultar-cip","text":"Se encarga de devolver la informaci\u00f3n de los cips solicitados. Para consumir el m\u00e9todo Consultar Ingresar el n\u00famero de CIP , se requieren los siguientes par\u00e1metros para la invocaci\u00f3n: URL: http://services.pagoefectivo.pe Punto de entrada: /v1/cips/search M\u00e9todo: POST Response: Ingresar el CIP, luego clic en Consultar y muestra la siguiente respuesta: A continuaci\u00f3n se muestra el c\u00f3digo desarrollado en C# para invocar el M\u00e9todo eliminar CIP. //M\u00e9todo Consultar CIP ... using ( var client = new HttpClient ()) { client . BaseAddress = new Uri ( responseAuthz . url ); client . DefaultRequestHeaders . Authorization = new AuthenticationHeaderValue ( \"Bearer\" , responseAuthz . Data . Token ); var cip = new CipSearch { Data = model . Data }; string stringData = JsonConvert . SerializeObject ( cip ); var contentData = new StringContent ( stringData , System . Text . Encoding . UTF8 , \"application/json\" ); HttpResponseMessage response = client . PostAsync ( \"v1/cips/search\" , contentData ). Result ; if ( response . IsSuccessStatusCode ) { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } else { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } } return View (); ...","title":"M\u00e9todo Consultar CIP"},{"location":"#metodo-actualizar-cip","text":"Se encarga de actualizar la fecha de expiraci\u00f3n de un cip generado; si el cip se encuentra expirado al actualizarse la fecha de expiraci\u00f3n este pasa a estado generado. Se requieren los siguientes par\u00e1metros de invocaci\u00f3n: URL: http://services.pagoefectivo.pe Punto de entrada: /v1/cips/{id} M\u00e9todo: PATCH Response: Ingresar el CIP y la fecha de expiraci\u00f3n, luego clic en Actualizar par mostrar la siguiente respuesta: Luego se verifica el CipURL para validar la actualizaci\u00f3n de la Fecha de expiraci\u00f3n. A continuaci\u00f3n se muestra el c\u00f3digo desarrollado en C# para invocar el M\u00e9todo actualizar CIP. //M\u00e9todo Actualizar CIP ... using ( var client = new HttpClient ()) { client . BaseAddress = new Uri ( responseAuthz . url ); client . DefaultRequestHeaders . Authorization = new AuthenticationHeaderValue ( \"Bearer\" , responseAuthz . Data . Token ); var cip = new CipUpdate { DateExpiry = model . DateExpiry }; string stringData = JsonConvert . SerializeObject ( cip ); var contentData = new StringContent ( stringData , System . Text . Encoding . UTF8 , \"application/json\" ); var request = new HttpRequestMessage ( new HttpMethod ( \"PATCH\" ), responseAuthz . url + \"v1/cips/\" + model . Data [ 0 ]. Cip ) { Content = contentData }; HttpResponseMessage response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } else { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } } return View (); ...","title":"M\u00e9todo Actualizar CIP"},{"location":"#metodo-eliminar-cip","text":"Se encarga de eliminar l\u00f3gicamente el N\u00famero de CIP siempre en cuando este a\u00fan se encuentre en estado generado, Para consumir el m\u00e9todo Eliminar ingresar el n\u00famero de CIP . Se requieren los siguientes par\u00e1metros de invocaci\u00f3n: URL: http://services.pagoefectivo.pe Punto de entrada: /v1/cips/{id} M\u00e9todo: DELETE Response: Ingresar el CIP, luego clic en Eliminar y Muestra la siguiente respuesta: Al verificar el CipUrl no muestra ninguna informaci\u00f3n habiendo hecho la eliminaci\u00f3n l\u00f3gica del Cip como se muestra a continuaci\u00f3n: A continuaci\u00f3n se muestra el c\u00f3digo desarrollado en C# para invocar el M\u00e9todo eliminar CIP. //M\u00e9todo Eliminar CIP ... using ( var client = new HttpClient ()) { client . BaseAddress = new Uri ( responseAuthz . url ); client . DefaultRequestHeaders . Authorization = new AuthenticationHeaderValue ( \"Bearer\" , responseAuthz . Data . Token ); HttpResponseMessage response = client . DeleteAsync ( \"v1/cips/\" + model . Data [ 0 ]. Cip ). Result ; if ( response . IsSuccessStatusCode ) { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } else { ViewBag . code = StatusCode (( int ) response . StatusCode ). StatusCode ; ViewBag . status = response . StatusCode ; ViewBag . response = response . Content . ReadAsStringAsync (). Result ; } } return View (); ...","title":"M\u00e9todo Eliminar CIP"},{"location":"#conclusion","text":"Se muestra la funcionalidad de PagoEfectivo API para la integraci\u00f3n de nuevos clientes, el uso del servicio de seguridad para obtener el acceso a todas los m\u00e9todos ofrecidos por PagoEfectivoSDK y el c\u00f3digo C# para la invocaci\u00f3n correcta de las funcionalidades.","title":"Conclusi\u00f3n"},{"location":"#demo","text":"Puede descargar la demo en el siguiente enlace: https://github.com/PagoEfectivo/api-pe-csharp-example","title":"Demo"}]}